# test_cast_vote.py

import os
import sys
import json
import base64
import requests
from cryptography.hazmat.primitives.ciphers.aead import AESGCM
from cryptography.hazmat.primitives.serialization import load_pem_public_key

# Th√™m ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc ƒë·ªÉ import common/crypto
# Gi·∫£ ƒë·ªãnh script n√†y n·∫±m ·ªü th∆∞ m·ª•c g·ªëc Project_eVote
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__))))

# Import c√°c h√†m t·ª´ file crypto.py c·ªßa b·∫°n
from common.crypto import load_public_key, generate_aes_key, rsa_encrypt

# --- 1. C·∫§U H√åNH V√Ä H√ÄM H·ªñ TR·ª¢ ---

# URL Server
BASE_URL = "http://127.0.0.1:8000"

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn Kh√≥a C√¥ng khai c·ªßa Admin
# Gi·∫£ ƒë·ªãnh Public Key n·∫±m t·∫°i Project_eVote/server/keys/admin_public_key.pem
PUBLIC_KEY_PATH = os.path.join(os.path.dirname(__file__), "server", "keys", "admin_public_key.pem")

# H√†m m√£ h√≥a AES-GCM (D√πng cho Client)
def aes_gcm_encrypt(key: bytes, iv: bytes, plaintext: bytes) -> bytes:
    """M√£ h√≥a n·ªôi dung phi·∫øu b·∫ßu b·∫±ng AES-GCM"""
    aesgcm = AESGCM(key)
    # Ghi ch√∫: AES-GCM trong Python tr·∫£ v·ªÅ ciphertext + tag (ƒë√£ g·ªôp)
    ciphertext_with_tag = aesgcm.encrypt(iv, plaintext, None)
    return ciphertext_with_tag


def run_cast_test(ballot_token: str):
    """Th·ª±c hi·ªán qu√° tr√¨nh m√£ h√≥a phi·∫øu b·∫ßu v√† g·ª≠i y√™u c·∫ßu POST /api/cast"""
    print("--- B·∫ÆT ƒê·∫¶U M√î PH·ªéNG CLIENT V√Ä TEST CAST VOTE ---")

    # 1. D·ªØ li·ªáu Phi·∫øu b·∫ßu (Payload s·∫Ω g·ª≠i)
    # Gi·∫£ ƒë·ªãnh c·ª≠ tri b·∫ßu cho ·ª®ng vi√™n c√≥ ID=3 trong Cu·ªôc b·∫ßu c·ª≠ ID=1
    VOTE_PAYLOAD = {
        "candidate_id": 3,
        "election_id": 1
    }
    vote_plaintext_bytes = json.dumps(VOTE_PAYLOAD).encode('utf-8')
    print(f"Phi·∫øu b·∫ßu th√¥: {VOTE_PAYLOAD}")

    # 2. T·∫£i Kh√≥a C√¥ng khai c·ªßa Admin
    try:
        admin_public_key = load_public_key(PUBLIC_KEY_PATH)
        print("‚úÖ T·∫£i Kh√≥a C√¥ng khai RSA th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫£i Kh√≥a C√¥ng khai. ƒê·∫£m b·∫£o file {PUBLIC_KEY_PATH} t·ªìn t·∫°i v√† h·ª£p l·ªá.")
        print(f"Chi ti·∫øt l·ªói: {e}")
        return

    # 3. Sinh Kh√≥a AES ng·∫´u nhi√™n
    aes_key, iv = generate_aes_key()
    print("‚úÖ Sinh Kh√≥a AES v√† IV ng·∫´u nhi√™n th√†nh c√¥ng.")

    # 4. M√£ h√≥a Phi·∫øu b·∫ßu b·∫±ng AES-GCM
    cipher_vote_bytes = aes_gcm_encrypt(aes_key, iv, vote_plaintext_bytes)
    print("‚úÖ M√£ h√≥a Phi·∫øu b·∫ßu (cipher_vote) th√†nh c√¥ng.")

    # 5. M√£ h√≥a Kh√≥a AES b·∫±ng RSA Public Key (Kh√≥a b·ªçc)
    enc_key_bytes = rsa_encrypt(admin_public_key, aes_key)
    print("‚úÖ M√£ h√≥a Kh√≥a AES (enc_key) b·∫±ng RSA th√†nh c√¥ng.")

    # 6. Chuy·ªÉn ƒë·ªïi sang chu·ªói Base64
    enc_key_b64 = base64.b64encode(enc_key_bytes).decode('utf-8')
    cipher_vote_b64 = base64.b64encode(cipher_vote_bytes).decode('utf-8')
    iv_b64 = base64.b64encode(iv).decode('utf-8')
    print("‚úÖ Chuy·ªÉn ƒë·ªïi Base64 ho√†n t·∫•t.")

    # 7. Chu·∫©n b·ªã Payload cho API /api/cast
    cast_payload = {
        "ballot_token": ballot_token,
        "enc_key": enc_key_b64,
        "cipher_vote": cipher_vote_b64,
        "iv": iv_b64
    }

    print("\n--- JSON PAYLOAD S·∫¥N S√ÄNG ---")
    print(json.dumps(cast_payload, indent=2))
    print("------------------------------\n")

    # 8. G·ª≠i y√™u c·∫ßu POST t·ªõi /api/cast
    cast_url = f"{BASE_URL}/api/cast"
    print(f"ƒêang g·ª≠i y√™u c·∫ßu POST t·ªõi: {cast_url}")
    
    try:
        response = requests.post(cast_url, json=cast_payload)
        response.raise_for_status() # N√©m l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
        
        print("\n=== K·∫æT QU·∫¢ CAST VOTE TH√ÄNH C√îNG ===")
        print(f"Status Code: {response.status_code}")
        print("Response Body:")
        print(json.dumps(response.json(), indent=2))
        print("====================================")
        
    except requests.exceptions.HTTPError as err:
        print(f"\n‚ùå L·ªñI KHI G·ª¨I CAST VOTE. Status Code: {err.response.status_code}")
        print(f"Chi ti·∫øt l·ªói t·ª´ Server: {err.response.json().get('detail', 'Kh√¥ng c√≥ chi ti·∫øt l·ªói.')}")
    except requests.exceptions.RequestException as e:
        print(f"\n‚ùå L·ªñI K·∫æT N·ªêI: ƒê·∫£m b·∫£o server ƒëang ch·∫°y t·∫°i {BASE_URL}.")
        print(f"Chi ti·∫øt l·ªói: {e}")

# --- TH·ª∞C THI SCRIPT ---

if __name__ == "__main__":
    # --- B∆Ø·ªöC C·∫¶N THI·∫æT: THAY TH·∫æ TOKEN N√ÄY ---
    # üö® B·∫°n PH·∫¢I l·∫•y token t·ª´ API /api/login tr∆∞·ªõc khi ch·∫°y script n√†y
    # V√≠ d·ª•: 3ER2kTXiqFKOLV4GaWDQ7-nX5D2QZPU...
    MY_BALLOT_TOKEN = "o1lK53K2dSvIPFTk7VGHyCrKmi1P6P0hRu12MqF8wp4" 
    
    if MY_BALLOT_TOKEN == "TOKEN_NH·∫¨N_ƒê∆Ø·ª¢C_T·ª™_API_LOGIN":
        print("üö® L·ªñI: Vui l√≤ng thay th·∫ø MY_BALLOT_TOKEN b·∫±ng token h·ª£p l·ªá t·ª´ API /api/login tr∆∞·ªõc khi ch·∫°y.")
    else:
        run_cast_test(MY_BALLOT_TOKEN)