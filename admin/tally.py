  # ‚úÖ Script CLI:
 #  - ƒê·ªçc danh s√°ch phi·∫øu t·ª´ server/data/evote.db
  #  - D√πng RSA-OAEP (private key) ƒë·ªÉ gi·∫£i m√£ AES key
  #  - D√πng AES-GCM ƒë·ªÉ gi·∫£i m√£ l√° phi·∫øu
 #  - ƒê·∫øm v√† in k·∫øt qu·∫£ b·∫ßu c·ª≠

# admin/tally.py (ƒê√£ s·ª≠a l·ªói Import v√† Logic Gi·∫£i m√£)

import sys
import os
from sqlmodel import Session, select
from datetime import datetime
import base64
import json
from typing import Optional, List, Dict

# Thi·∫øt l·∫≠p Python Path ƒë·ªÉ import common/crypto v√† server/models/db
# ƒê∆∞·ªùng d·∫´n t·ª´ admin/ -> Project_eVote/
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(PROJECT_ROOT)

# ‚úÖ C·∫≠p nh·∫≠t imports ƒë·ªÉ kh·ªõp v·ªõi h√†m m·ªõi
from common.crypto import load_private_key, rsa_decrypt, aes_gcm_decrypt
from server.models.db import (
    engine, 
    Election, 
    VoteRecordEncrypted, 
    VoteRecordDecrypted, 
    Candidate, 
    Voter
)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn Private Key
PRIVATE_KEY_PATH = os.path.join(PROJECT_ROOT, "admin", "keys", "admin_private_key.pem")

# --------------------------
# KH·ªêI CODE KI·ªÇM TRA ƒê∆Ø·ªúNG D·∫™N
# --------------------------
def check_key_path():
    print("------------------------------------------")
    print(f"ƒêang ki·ªÉm tra ƒë∆∞·ªùng d·∫´n Private Key:")
    print(f"ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi d·ª± ki·∫øn: {os.path.abspath(PRIVATE_KEY_PATH)}")
    
    if os.path.exists(PRIVATE_KEY_PATH):
        print("‚úÖ T√åM TH·∫§Y! ƒê∆∞·ªùng d·∫´n Private Key ƒë√£ ch√≠nh x√°c.")
        return True
    else:
        print("‚ùå KH√îNG T√åM TH·∫§Y! Vui l√≤ng ki·ªÉm tra c√°c m·ª•c sau:")
        print(f"1. ƒê·∫£m b·∫£o th∆∞ m·ª•c 'admin/keys/' ƒë√£ t·ªìn t·∫°i.")
        print(f"2. ƒê·∫£m b·∫£o b·∫°n ƒë√£ ch·∫°y file 'generate_keys.py' ƒë·ªÉ sinh file 'admin_private_key.pem'.")
        print(f"3. ƒê·∫£m b·∫£o b·∫°n ch·∫°y 'python admin/tally.py' t·ª´ th∆∞ m·ª•c G·ªêC c·ªßa d·ª± √°n (Project_eVote).")
        return False

# Ch·∫°y ki·ªÉm tra tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ki·ªÉm phi·∫øu
if not check_key_path():
    # D·ª´ng script n·∫øu kh√¥ng t√¨m th·∫•y kh√≥a
    sys.exit(1)
# --- H√†m Ch√≠nh: Ki·ªÉm phi·∫øu ---

def tally_votes(election_id: int):
    """
    T·∫£i Private Key, gi·∫£i m√£ t·∫•t c·∫£ phi·∫øu b·∫ßu m√£ h√≥a v√† l∆∞u v√†o b·∫£ng gi·∫£i m√£.
    """
    print("====================================")
    print(f"üó≥Ô∏è B·∫ÆT ƒê·∫¶U KI·ªÇM PHI·∫æU CHO CU·ªòC B·∫¶U C·ª¨ ID: {election_id}")
    print("====================================")

    # 1. T·∫£i Private Key
    try:
        private_key = load_private_key(PRIVATE_KEY_PATH)
        print("‚úÖ T·∫£i Private Key th√†nh c√¥ng.")
    except Exception as e:
        print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ t·∫£i Private Key t·ª´ {PRIVATE_KEY_PATH}. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† file.")
        print(f"Chi ti·∫øt: {e}")
        return

    total_encrypted_votes = 0
    total_decrypted_success = 0
    tally_results: Dict[str, int] = {}
    
    with Session(engine) as session:
        # Ki·ªÉm tra Cu·ªôc b·∫ßu c·ª≠
        election = session.get(Election, election_id)
        if not election:
            print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y Cu·ªôc b·∫ßu c·ª≠ v·ªõi ID={election_id}.")
            return

        # 2. T·∫£i t·∫•t c·∫£ phi·∫øu b·∫ßu m√£ h√≥a
        statement = select(VoteRecordEncrypted).where(
            VoteRecordEncrypted.election_id == election_id
        )
        encrypted_votes: List[VoteRecordEncrypted] = session.exec(statement).all()
        total_encrypted_votes = len(encrypted_votes)
        
        print(f"ƒê√£ t√¨m th·∫•y {total_encrypted_votes} phi·∫øu b·∫ßu m√£ h√≥a.")

        # 3. Ti·∫øn h√†nh gi·∫£i m√£ t·ª´ng phi·∫øu
        for record in encrypted_votes:
            # B·ªè qua n·∫øu phi·∫øu n√†y ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£ tr∆∞·ªõc ƒë√≥
            if record.decrypted_record:
                print(f"   -> Phi·∫øu {record.id}: ƒê√£ gi·∫£i m√£. B·ªè qua.")
                continue

            try:
                # 3a. Gi·∫£i m√£ Kh√≥a AES (session key) b·∫±ng RSA Private Key
                enc_key_bytes = base64.b64decode(record.enc_key.encode('utf-8'))
                # ‚úÖ D√πng h√†m rsa_decrypt m·ªõi c·ªßa b·∫°n
                aes_key = rsa_decrypt(private_key, enc_key_bytes)

                if aes_key is None:
                    raise Exception("Gi·∫£i m√£ Kh√≥a AES th·∫•t b·∫°i.")

                # 3b. Gi·∫£i m√£ Phi·∫øu b·∫ßu b·∫±ng AES-GCM
                cipher_vote_bytes = base64.b64decode(record.cipher_vote.encode('utf-8'))
                iv_bytes = base64.b64decode(record.iv.encode('utf-8'))
                
                # ‚úÖ D√πng h√†m aes_gcm_decrypt m·ªõi c·ªßa b·∫°n
                decrypted_bytes = aes_gcm_decrypt(aes_key, iv_bytes, cipher_vote_bytes)
                decrypted_json_str = decrypted_bytes.decode('utf-8')

                # 3c. Ph√¢n t√≠ch n·ªôi dung phi·∫øu b·∫ßu
                # Gi·∫£ ƒë·ªãnh: Phi·∫øu b·∫ßu c√≥ ƒë·ªãnh d·∫°ng {"candidate_id": X, "voter_id": Y}
                decrypted_data = json.loads(decrypted_json_str)
                selected_candidate_id = decrypted_data.get("candidate_id")
                voter_id_from_vote = decrypted_data.get("voter_id") 

                if not selected_candidate_id or not voter_id_from_vote:
                    raise Exception("N·ªôi dung phi·∫øu b·∫ßu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.")

                # 4. L∆∞u k·∫øt qu·∫£ v√†o b·∫£ng gi·∫£i m√£
                decrypted_record = VoteRecordDecrypted(
                    election_id=record.election_id,
                    voter_id=voter_id_from_vote,
                    candidate_id=selected_candidate_id,
                    timestamp=record.timestamp,
                    is_valid=True,
                    encrypted_record_id=record.id
                )
                session.add(decrypted_record)
                
                # C·∫≠p nh·∫≠t t·ªïng k·∫øt qu·∫£
                candidate_name = session.get(Candidate, selected_candidate_id).name if session.get(Candidate, selected_candidate_id) else f"ID {selected_candidate_id}"
                tally_results[candidate_name] = tally_results.get(candidate_name, 0) + 1
                total_decrypted_success += 1
                
            except Exception as e:
                print(f"   -> Phi·∫øu {record.id} L·ªñI GI·∫¢I M√É: {e}. ƒê√°nh d·∫•u KH√îNG H·ª¢P L·ªÜ.")
                
        session.commit()
        
    # 5. In k·∫øt qu·∫£ cu·ªëi c√πng
    print("\n====================================")
    print("‚ú® K·∫æT QU·∫¢ KI·ªÇM PHI·∫æU CU·ªêI C√ôNG ‚ú®")
    print("====================================")
    print(f"T·ªïng s·ªë phi·∫øu m√£ h√≥a: {total_encrypted_votes}")
    print(f"S·ªë phi·∫øu gi·∫£i m√£ th√†nh c√¥ng: {total_decrypted_success}")
    print(f"S·ªë phi·∫øu kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c: {total_encrypted_votes - total_decrypted_success}")
    print("\n--- K·∫æT QU·∫¢ B·ªé PHI·∫æU ---")
    
    sorted_results = sorted(tally_results.items(), key=lambda item: item[1], reverse=True)
    
    for candidate, count in sorted_results:
        print(f"{candidate:25}: {count} phi·∫øu")
        
    print("====================================")
    print("HO√ÄN T·∫§T KI·ªÇM PHI·∫æU.")


if __name__ == "__main__":
    ELECTION_ID_TO_TALLY = 1 
    tally_votes(ELECTION_ID_TO_TALLY)