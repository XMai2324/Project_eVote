# interactive_test_v2.py

import json
import base64
import os
import bcrypt
from common.crypto import (
    generate_rsa_keys,
    rsa_encrypt,
    rsa_decrypt,
    generate_aes_key,
    aes_gcm_encrypt,
    aes_gcm_decrypt,
    serialization
)
from cryptography.hazmat.primitives.asymmetric import rsa

def get_aes_key_input():
    """L·∫•y Kh√≥a AES t·ª´ ng∆∞·ªùi d√πng (d·∫°ng Base64) ho·∫∑c t·∫°o ng·∫´u nhi√™n."""
    while True:
        choice = input("B·∫°n mu·ªën (1) T·∫°o Kh√≥a AES ng·∫´u nhi√™n hay (2) Nh·∫≠p Kh√≥a AES t√πy ch·ªânh (Base64)? (1/2): ")
        if choice == '1':
            aes_key, iv = generate_aes_key()
            print(f"\nKh√≥a AES ng·∫´u nhi√™n ƒë∆∞·ª£c t·∫°o: {base64.b64encode(aes_key).decode()}")
            return aes_key, iv
        
        elif choice == '2':
            # Kh√≥a AES 256-bit l√† 32 bytes. Base64 c·ªßa 32 bytes l√† 44 k√Ω t·ª±.
            key_base64 = input("Nh·∫≠p Kh√≥a AES t√πy ch·ªânh (44 k√Ω t·ª± Base64): ")
            
            try:
                custom_aes_key = base64.b64decode(key_base64)
                if len(custom_aes_key) != 32:
                    print(f"L·ªói: ƒê·ªô d√†i key ph·∫£i l√† 32 bytes (nh·∫≠p {len(custom_aes_key)} bytes). Vui l√≤ng ki·ªÉm tra l·∫°i Base64.")
                    continue
                
                # T·∫°o IV ng·∫´u nhi√™n (v√¨ IV ph·∫£i l√† ng·∫´u nhi√™n cho m·ªói phi√™n AES-GCM)
                iv = os.urandom(12) 
                print(f"Kh√≥a AES t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n.")
                return custom_aes_key, iv
            except Exception as e:
                print(f"L·ªói khi decode Base64: {e}. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.")
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")


def interactive_test_flow():
    """Ch·∫°y lu·ªìng m√£ h√≥a v√† gi·∫£i m√£ t∆∞∆°ng t√°c."""

    print("==================================================")
    print("DEMO LU·ªíNG M√É H√ìA LAI E-VOTE (CLIENT -> ADMIN)")
    print("==================================================")

    # --- B∆Ø·ªöC 1: ADMIN T·∫†O V√Ä CUNG C·∫§P KH√ìA C√îNG KHAI ---
    print("\n[SETUP] Admin t·∫°o Kh√≥a RSA (C√¥ng khai & Ri√™ng t∆∞) cho phi√™n demo...")
    admin_private_key, admin_public_key = generate_rsa_keys()
    
    pub_key_pem = admin_public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    print("Kh√≥a C√¥ng khai (ƒë·ªÉ Client d√πng m√£ h√≥a) ƒë√£ s·∫µn s√†ng.")

    # --- B∆Ø·ªöC 2: CLIENT CHU·∫®N B·ªä V√Ä M√É H√ìA ---
    
    # a. L·∫•y Input Phi·∫øu b·∫ßu
    print("\n--------------------------------------------------")
    print("[CLIENT] üó≥Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung phi·∫øu b·∫ßu (d·∫°ng JSON):")
    while True:
        try:
            plaintext_str = input("Phi·∫øu b·∫ßu (JSON): ")
            json.loads(plaintext_str) 
            break
        except json.JSONDecodeError:
            print("L·ªói: D·ªØ li·ªáu nh·∫≠p kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            
    plaintext_vote_bytes = plaintext_str.encode('utf-8')
    
    # b. L·∫•y Kh√≥a AES t·ª´ ng∆∞·ªùi d√πng (Ph·∫ßn b·∫°n mu·ªën nh·∫≠p key)
    aes_key, iv = get_aes_key_input()
    
    print("\n[CLIENT]  B·∫Øt ƒë·∫ßu m√£ h√≥a...")
    
    # c. M√£ h√≥a Phi·∫øu b·∫ßu b·∫±ng AES-GCM (d√πng AES Key v√† IV)
    cipher_vote_with_tag = aes_gcm_encrypt(aes_key, iv, plaintext_vote_bytes)
    
    # d. M√£ h√≥a Kh√≥a AES b·∫±ng RSA Public Key c·ªßa Admin (enc_key)
    encrypted_aes_key = rsa_encrypt(admin_public_key, aes_key)

    print(" M√£ h√≥a ho√†n t·∫•t.")
    
    # D·ªØ li·ªáu g·ª≠i l√™n Server (l∆∞u v√†o DB)
    data_to_server = {
        "enc_key": encrypted_aes_key.hex(),
        "cipher_vote": cipher_vote_with_tag.hex(),
        "iv": iv.hex()
    }
    
    print("\n[SERVER/DB] üíæ D·ªØ li·ªáu Phi·∫øu ƒë√£ m√£ h√≥a ƒë∆∞·ª£c l∆∞u tr·ªØ:")
    print(f" - Encrypted AES Key (enc_key): {data_to_server['enc_key'][:30]}...")
    print(f" - Ciphertext (cipher_vote):   {data_to_server['cipher_vote'][:30]}...")
    print(f" - IV (iv):                    {data_to_server['iv']}")
    
    # --- B∆Ø·ªöC 3: ADMIN KI·ªÇM PHI·∫æU V√Ä GI·∫¢I M√É ---
    
    print("\n--------------------------------------------------")
    input("[ADMIN TOOL]  B·∫•m Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu Gi·∫£i m√£ (s·ª≠ d·ª•ng Kh√≥a Ri√™ng t∆∞ c·ªßa Admin)...")
    
    # L·∫•y d·ªØ li·ªáu t·ª´ Server/DB v√† chuy·ªÉn l·∫°i v·ªÅ bytes
    db_enc_key = bytes.fromhex(data_to_server['enc_key'])
    db_cipher_vote = bytes.fromhex(data_to_server['cipher_vote'])
    db_iv = bytes.fromhex(data_to_server['iv'])
    
    # a. Gi·∫£i m√£ Kh√≥a AES (d√πng RSA Private Key c·ªßa Admin)
    decrypted_aes_key = rsa_decrypt(admin_private_key, db_enc_key)
    
    # b. Gi·∫£i m√£ Phi·∫øu b·∫ßu (d√πng Kh√≥a AES ƒë√£ gi·∫£i m√£ v√† IV)
    decrypted_vote_data_bytes = aes_gcm_decrypt(decrypted_aes_key, db_iv, db_cipher_vote)
    
    decrypted_vote_data_str = decrypted_vote_data_bytes.decode('utf-8')
    
    print("Gi·∫£i m√£ Kh√≥a AES v√† Phi·∫øu b·∫ßu th√†nh c√¥ng.")
    print("\n[K·∫æT QU·∫¢ CU·ªêI] Phi·∫øu B·∫ßu ƒë√£ Gi·∫£i m√£:")
    print(decrypted_vote_data_str)

    # --- X√°c nh·∫≠n ---
    if decrypted_vote_data_str == plaintext_str:
        print("\nüéâ TH√ÄNH C√îNG: D·ªØ li·ªáu gi·∫£i m√£ tr√πng kh·ªõp v·ªõi Phi·∫øu g·ªëc.")
    else:
        print("\n‚ùå L·ªñI: D·ªØ li·ªáu gi·∫£i m√£ KH√îNG tr√πng kh·ªõp.")


if __name__ == "__main__":
    interactive_test_flow()